const { PDFDocument, rgb, StandardFonts } = require("pdf-lib");

module.exports = async function generatePDF(transaction) {
  const pdfDoc = await PDFDocument.create();
  const page = pdfDoc.addPage([600, 780]);
  const font = await pdfDoc.embedFont(StandardFonts.Helvetica);
  const boldFont = await pdfDoc.embedFont(StandardFonts.HelveticaBold);

  const {
    from,
    to,
    amount,
    toIban,
    note,
    date,
    recipient,
    _id
  } = transaction;

  const formattedDate = new Date(date || Date.now()).toLocaleString("en-GB", {
    day: "2-digit",
    month: "short",
    year: "numeric",
    hour: "2-digit",
    minute: "2-digit"
  });

  const ref = _id?.toString().slice(-6).toUpperCase() || Math.random().toString(36).slice(2, 10).toUpperCase();
  const currency = `€${Number(amount || 0).toLocaleString("en-US", {
    minimumFractionDigits: 2,
    maximumFractionDigits: 2
  })}`;

  let y = 740;
  const leftX = 50;
  const rightX = 300;
  const lineHeight = 24;

  // === HEADER ===
  page.drawText("Credibe", {
    x: 50,
    y,
    size: 26,
    font: boldFont,
    color: rgb(0.2, 0.6, 1)
  });

  y -= 36;
  page.drawText("Transaction Receipt", {
    x: 50,
    y,
    size: 18,
    font: boldFont,
    color: rgb(0, 0, 0)
  });

  y -= 40;
  page.drawText(currency, {
    x: 50,
    y,
    size: 24,
    font: boldFont,
    color: rgb(0, 0, 0)
  });

  y -= 50;

  // === FROM INFO ===
  page.drawText("From:", { x: leftX, y, size: 12, font: boldFont });
  page.drawText(from?.name || "N/A", { x: rightX, y, size: 12, font });
  y -= lineHeight;

  page.drawText("Account:", { x: leftX, y, size: 12, font: boldFont });
  page.drawText(`****${from?.iban?.slice(-4) || "0000"}`, { x: rightX, y, size: 12, font });

  y -= 40;

  // === TO INFO ===
  page.drawText("To:", { x: leftX, y, size: 12, font: boldFont });
  page.drawText(recipient || to?.name || "Recipient", { x: rightX, y, size: 12, font });
  y -= lineHeight;

  page.drawText("Account:", { x: leftX, y, size: 12, font: boldFont });
  page.drawText(toIban || to?.iban || "****0000", { x: rightX, y, size: 12, font });

  y -= 40;

  // === SUMMARY ===
  page.drawText("Transfer Amount:", { x: leftX, y, size: 12, font: boldFont });
  page.drawText(currency, { x: rightX, y, size: 12, font });
  y -= lineHeight;

  page.drawText("Transfer Fee:", { x: leftX, y, size: 12, font: boldFont });
  page.drawText("€0.00 FREE", { x: rightX, y, size: 12, font, color: rgb(0, 0.6, 0) });
  y -= lineHeight;

  page.drawText("Total Amount:", { x: leftX, y, size: 12, font: boldFont });
  page.drawText(currency, { x: rightX, y, size: 12, font });
  y -= lineHeight;

  page.drawText("Reference Number:", { x: leftX, y, size: 12, font: boldFont });
  page.drawText(ref, { x: rightX, y, size: 12, font });
  y -= lineHeight;

  page.drawText("Processing Time:", { x: leftX, y, size: 12, font: boldFont });
  page.drawText("Realtime", { x: rightX, y, size: 12, font });
  y -= lineHeight;

  page.drawText("Transaction Date & Time:", { x: leftX, y, size: 12, font: boldFont });
  page.drawText(formattedDate, { x: rightX, y, size: 12, font });
  y -= lineHeight;

  if (note) {
    y -= 10;
    page.drawText("Note:", { x: leftX, y, size: 12, font: boldFont });
    page.drawText(note, { x: rightX, y, size: 12, font });
  }

  // === FOOTER ===
  page.drawText("Receipt generated by Credibe Bank", {
    x: 50,
    y: 40,
    size: 10,
    font,
    color: rgb(0.5, 0.5, 0.5)
  });

  const pdfBytes = await pdfDoc.save();
  return Buffer.from(pdfBytes); // ✅ return valid Node.js Buffer for sendOTP
};
